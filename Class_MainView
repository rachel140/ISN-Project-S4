import datetime
import customtkinter as ctk
import tkinter as tk

from Class_Controller import Controller
from Class_SecondaryView import SecondaryView
from Class_Coordinate_Converter import CoordinateConverter


class MainView(ctk.CTk):
    def __init__(self):
        super().__init__()
        self.title("Map")
        self.geometry("900x600")
        ctk.set_appearance_mode("light")

        current_year = datetime.datetime.now().year
        self.rounded_year = min(2500, max(2000, 5 * round(current_year / 5)))

        self.controller = Controller()
        self.secondary_view = SecondaryView(self.controller)

        self.coordinate_converter = CoordinateConverter()
        self.create_widget()

        self.controller.set_views(self, self.secondary_view)
    def create_widget(self):
#-----------------------------------------------------------------------------#
#### ------------------------------- Frames ------------------------------ ####
#-----------------------------------------------------------------------------#
        self.user_label = ctk.CTkLabel(self, text="World Map", 
                                       font=ctk.CTkFont(size=18, weight="bold")
                                       )
        self.user_label.pack(pady=10)

#### ------------------------- Bottom Left Frame ------------------------- ####
        self.frame_bottom_left = ctk.CTkFrame(self, fg_color="lightblue")
        self.frame_bottom_left.pack(side='bottom', fill='x', padx=20, pady=20)

    # Year (label)
        self.year_label = ctk.CTkLabel(self.frame_bottom_left,
                                       text="Please select a year:"
                                       )
        self.year_label.grid(row=0, column=0, columnspan=2)

        # Year slider (scale)
        self.year_scale = ctk.CTkSlider(self.frame_bottom_left,
                                        from_=1950, to=2500,
                                        number_of_steps=(2500-1950)//5,
                                        command=self.on_scale_change,
                                        width=200
                                        )
        # Set initial year
        self.year_scale.set(self.rounded_year)
        self.year_scale.grid(row=2, column=0, columnspan=2, pady=5)

        # Year value display (label)
        self.year_value_label = ctk.CTkLabel(self.frame_bottom_left, 
                                             text=str(self.rounded_year)
                                             )
        self.year_value_label.grid(row=1, column=0, columnspan=2)

        # Plus/minus (button)
        self.decrease_button = ctk.CTkButton(self.frame_bottom_left, 
                                             text="-5", 
                                             command=self.decrease_scale
                                             )
        self.decrease_button.grid(row=3, column=0, pady=5)

        self.increase_button = ctk.CTkButton(self.frame_bottom_left,
                                             text="+5", 
                                             command=self.increase_scale
                                             )
        self.increase_button.grid(row=3, column=1, pady=5)

    # Sea level
        self.sea_level_title = ctk.CTkLabel(self.frame_bottom_left, 
                                            text="Sea level:"
                                            )
        self.sea_level_title.grid(row=1, column=3, padx=5)

        self.sea_level_label = ctk.CTkLabel(self.frame_bottom_left, 
                                            text="0.254 m"
                                            )
        self.sea_level_label.grid(row=2, column=3, padx=5)

    # IPCC (label)
        self.ipcc_label = ctk.CTkLabel(self.frame_bottom_left, 
                                       text="Choose your IPCC Scenario:"
                                       )
        self.ipcc_label.grid(row=0, column=4)

        # IPCC (radiobutton)
        self.ipcc_choice_var = ctk.IntVar(value=4)
        values = {"IPCC-1": 1, "IPCC-2": 2, "IPCC-3": 3, "IPCC-4": 4}
        for i, (text, value) in enumerate(values.items()):
            rb = ctk.CTkRadioButton(self.frame_bottom_left,
                                    text=text,
                                    variable=self.ipcc_choice_var,
                                    value=value)
            rb.grid(row=i + 1, column=4, pady=2)

    # Generate map (button)
        self.generate_button = ctk.CTkButton(self.frame_bottom_left, 
                                             text="Generate map", 
                                             command=self.show_map
                                             )
        self.generate_button.grid(row=2, column=5, padx=10)

#### ------------------------- Right Side Frame -------------------------- ####
        self.frame_right = ctk.CTkFrame(self, width=300)
        self.frame_right.pack(side='right', anchor='n', fill='y', padx=20)
        self.frame_right.pack_propagate(False)

    # View mode (label)
        self.view_mode_label = ctk.CTkLabel(self.frame_right,
                                            text="View Mode:"
                                            )
        self.view_mode_label.grid(row=1, column=1, pady=(10,0))

        self.view_mode_value = ctk.CTkLabel(self.frame_right, 
                                            text="Top View"
                                            )
        self.view_mode_value.grid(row=2, column=1)
        
    #testing the profile
        self.profile_button = ctk.CTkButton(self.frame_right,
                                            text="Profile_button",
                                            )
        self.profile_button.grid(row=2, column=1)

#### ------------------------- Main (Map) Frame ------------------------- ####
        self.frame_map = ctk.CTkFrame(self, 
                                      fg_color="midnightblue",
                                      width=300, height=200
                                      )
        self.frame_map.pack(fill='both', expand=True)
        self.frame_map.pack_propagate(False)

        self.placeholder_label = ctk.CTkLabel(self.frame_map, 
                                              text="You have not loaded a map yet", 
                                              text_color="white"
                                              )
        self.placeholder_label.pack(expand=True)
        self.loading_label = ctk.CTkLabel(self.frame_map, 
                                          text="Map is loading...", 
                                          text_color="white")
        
        # Initialize sea level label
        self.on_scale_change(self.rounded_year)

#-----------------------------------------------------------------------------#
#### ------------------------------ Methods ------------------------------ ####
#-----------------------------------------------------------------------------#
    def on_scale_change(self, value):
        year = int(round(float(value) / 5) * 5)  # to have step of 5 on scale
        self.year_value_label.configure(text=str(year))
        sea_level = round(self.controller.get_sea_level(self.get_user_year(), int(self.get_ipcc_value())), 3)
        self.sea_level_label.configure(text=f"{sea_level} m")

    def increase_scale(self):
        val = self.year_scale.get()
        new_val = min(2500, val + 5)
        self.year_scale.set(new_val)
        self.on_scale_change(new_val)

    def decrease_scale(self):
        val = self.year_scale.get()
        new_val = max(1950, val - 5)
        self.year_scale.set(new_val)
        self.on_scale_change(new_val)

    def get_ipcc_value(self):
        return int(self.ipcc_choice_var.get())

    def get_user_year(self):
        return int(round(self.year_scale.get() / 5) * 5)
    
    def show_map(self):
        # Show the loading label
        self.loading_label.place(relx=0.5, rely=0.5, anchor='center')
    
        # Remove placeholder if it exists
        if self.placeholder_label.winfo_exists():
            self.placeholder_label.destroy()
    
        # Let the GUI update so the loading label is visible
        self.update_idletasks()
    
        # Use .after() to delay just enough to show loading before heavy tasks
        self.after(10, self.generate_map_canvas)

    def generate_map_canvas(self):

        self.map_canvas = tk.Canvas(self.frame_map, bg="white", highlightthickness=0)
        self.map_canvas.place(relx=0, rely=0, relwidth=1, relheight=1)

        self.controller.create_map()

        self.loading_label.place_forget()

if __name__ == "__main__":
    #ctk.set_appearance_mode("light")
    app = MainView()
    app.mainloop()
