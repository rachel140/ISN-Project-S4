import datetime
import tkinter as tk

from Class_SecondaryView import SecondaryView
from Class_Controller import Controller

class MainView(tk.Tk):

    def __init__(self):
        super().__init__()
        self.title("Map")

        # so the scale automatically gets placed on this year
        current_year = datetime.datetime.now().year
        self.rounded_year = min(2500, max(2000, 5 * round(current_year / 5)))

        self.secondary_view = SecondaryView()
        self.controller = Controller()
        self.create_widget()

        #self.click_coordinates = [] # List to store click coordinates

    def create_widget(self):
        #colourcodes so that we do not need to change the colours everywhere
        bottom_bar = "lightblue"
        linked_to_map = "midnight blue"

#-----------------------------------------------------------------------------#
#### ------------------------------- Frames ------------------------------ ####
#-----------------------------------------------------------------------------#
        self.user_label = tk.Label(self, text="World Map")
        self.user_label.pack(pady=10)

#### ------------------------- Bottom Left Frame ------------------------- ####
        self.frame_bottom_left = tk.Frame(self, bg= bottom_bar,
                                          height=100)
        self.frame_bottom_left.pack(side='bottom',
                                    fill= 'x',
                                    padx= 20, pady= 20)
        self.frame_bottom_left.pack_propagate(False)

    # IPCC Option Label
        self.ipcc_label = tk.Label(self.frame_bottom_left,
                                   text="Choose your IPCC Scenario",
                                   bg=bottom_bar,
                                   fg="white")
        self.ipcc_label.grid(row=0, column=2, sticky='e', padx=5)

    # Variable to hold selected IPCC value (as integer)
        self.ipcc_choice_var = tk.IntVar(value=4)  # default to 4

    # IPCC Radio Buttons (1 to 4)
        for i, val in enumerate([1, 2, 3, 4]):
            rb = tk.Radiobutton(self.frame_bottom_left,
                text=str(val),  # label remains as string
                variable=self.ipcc_choice_var,
                value=val,  # integer value
                bg=bottom_bar,
                fg="white",
                selectcolor=bottom_bar,
                activebackground=bottom_bar)
        rb.grid(row=i+1, column=2, sticky='e', padx=5)

    # Generate map (button)
        self.generate_button = tk.Button(self.frame_bottom_left,
                                        text="Generate map",
                                        command = self.show_map,
                                        bg= linked_to_map,
                                        fg= "white")
        self.generate_button.grid(row=1, column= 10,
                                  padx=10, pady=10)

    # Scale (label)
        self.year_label = tk.Label(self.frame_bottom_left,
                                        text="Please select a year:",
                                        bg= bottom_bar)
        self.year_label.grid(row=0, column= 0)

    # Scale (widget)
        self.year_scale = tk.Scale(self.frame_bottom_left,
                                   from_=1950, to=2500,
                                   resolution= 5,
                                   orient="horizontal",
                                   command=self.on_scale_change,
                                   bg= bottom_bar)
        self.year_scale.set(self.rounded_year)
        self.year_scale.grid(row=1, column= 0)

    # Sea level (label)
        self.sea_level_label = tk.Label(self.frame_bottom_left,
                                        text="Sea level:",
                                        bg= bottom_bar)
        self.sea_level_label.grid(row=1, column= 1)
        self.on_scale_change(self.year_scale.get())


    # Plus five (button)
        self.increase_button = tk.Button(self.frame_bottom_left,
                                          text="+5",
                                          command=self.increase_scale,
                                          bg= bottom_bar)
        self.increase_button.grid(row=2, column= 0, sticky= "e")

    # Minus five (button)
        self.decrease_button = tk.Button(self.frame_bottom_left,
                                          text="-5",
                                          command=self.decrease_scale,
                                          bg= bottom_bar)
        self.decrease_button.grid(row=2, column= 0, sticky= "w")

#### ------------------------- Right Side Frame -------------------------- ####
        self.frame_right = tk.Frame(self, bg= "pink", width=300)
        self.frame_right.pack(side='right', anchor ='n', fill= 'y',
                              padx= 20, pady= 0)
        self.frame_right.pack_propagate(False)


        # View Mode (Label)
        self.view_mode_label = tk.Label(self.frame_right,
                                        text= "View Mode:")
        self.view_mode_label.grid(row=1, column=1)


        # View Mode Value (Label)
        self.view_mode_value = tk.Label(self.frame_right,
                                        text= "Top View")
        self.view_mode_value.grid(row=2, column=1)

#### ------------------------- Main (Map) Frame ------------------------- ####
        self.frame_map = tk.Frame(self, bg= linked_to_map,
                                        width=300, height=200)
        self.frame_map.pack(fill='both', expand=True)
        self.frame_map.pack_propagate(False)


        # initial (label)
        self.placeholder_label = tk.Label(self.frame_map,
                                          bg= linked_to_map,
                                          text= "You have not loaded a map yet",
                                          fg= "white")
        self.placeholder_label.pack(expand= True)

        # bind click on canvas
        #self.map_canvas.bind("<Button-1>", self.on_canvas_click)

#-----------------------------------------------------------------------------#
#### ------------------------------ Methods ------------------------------ ####
#-----------------------------------------------------------------------------#

    def on_scale_change(self, value):
        year = int(value)
        sea_level = round(self.controller.get_sea_level(year, int(self.ipcc_choice_var.get())),3)
        self.sea_level_label.config(text= f"Sea level:\n {sea_level} m")

    def increase_scale(self):
        current_value = self.year_scale.get()
        if current_value < self.year_scale.cget("to"):
            self.year_scale.set(current_value + 5)
            # self.on_scale_change(current_value + 5)

    def get_ipcc_value(self):
        return int(self.ipcc_choice_var.get())

    def get_user_year(self):
        return self.year_scale.get()

    def decrease_scale(self):
        current_value = self.year_scale.get()
        if current_value > 2004:
            self.year_scale.set(current_value - 5)
            # self.on_scale_change(current_value - 5)

    def show_map(self):
        # Remove placeholder if still present
        if self.placeholder_label.winfo_exists():
            self.placeholder_label.destroy()
        print("Frame map size:", self.frame_map.winfo_width(), self.frame_map.winfo_height())
        # create the canvas
        self.map_canvas = tk.Canvas(self.frame_map)
        self.map_canvas.place(relx=0, rely=0, relwidth=1, relheight=1)

        # Redraw map on the existing canvas
        self.secondary_view.create_map(self.map_canvas,
                                          self.frame_map.winfo_width(),
                                          self.frame_map.winfo_height(),
                                          self.year_scale.get(),
                                          self.get_ipcc_value())

        self.map_canvas.bind("<Button-1>", self.on_canvas_click)

    def on_canvas_click(self, event=None):
        # Store the x and y coordinates of the click
        x = event.x
        y = event.y
        print(f"Clicked at: ({x}, {y})")
        return(x,y)

        # add a point to the canvas at the clicked location
        # self.controller.add_point(self.map_canvas, x, y)


if __name__ == "__main__":
    app = MainView()
    app.mainloop()
