from Class_SeaLevel import SeaLevel
from Class_ElevationData import ElevationData
from Class_ProfileView import ProfileView
from Class_Coordinate_Converter import CoordinateConverter

class Controller:

    def __init__(self):
        #files used
        self.world_elevation = "ETOPO_2022_v1_60s_N90W180_bed.nc"
        self.mainland_france_contour = "fr_mainland_contour.csv"
        self.mainland_france = "fr_mainland_contour.csv"
        
        #adding other classes
        self.sea_level = SeaLevel()
        self.main_view = None
        self.secondary_view = None
        self.profile_view = ProfileView()
        self.coordinate_converter = CoordinateConverter()
        self.elevation_data = ElevationData(self.world_elevation, self.mainland_france_contour)
        
        #information for maps:
        self.side = "top" 


    def set_views(self, mainview, secondaryview):
        self.main_view = mainview
        self.secondary_view = secondaryview
        
        #information for maps:
        self.frame = self.main_view.frame_map
        self.width = self.main_view.frame_map.winfo_width()
        self.height = self.main_view.frame_map.winfo_height()
        self.sea_level_value = self.sea_level.retrieve_sea_level(self.main_view.get_user_year(),
                                                                 self.main_view.get_ipcc_value()
                                                                 )
    def top_or_side(self):
        """
        Define if we want to display to profile view or the global one.

        Returns
        -------
        None.

        """
        if self.side == "top": #The user wants to see the global map
            self.create_map()
        if self.side == "profile": #The user wants to see the profile view of a specific country
            self.create_profile_view()

    def get_sea_level(self, year, scenario):
        """
        Retrieve the sea level from the SeaLevel class and its functions

        Parameters
        ----------
        year : int
            Year choosen by the user to visualize
        scenario : int
            GIEC scenario choosen by the user to visualize

        Returns
        -------
        self.sea_level_value : float
            Sea level for the corresponding year and scenario

        """
        self.sea_level_value = self.sea_level.retrieve_sea_level(year, scenario) #Uses SeaLevel class function
        return self.sea_level_value
        
    def get_where_clicked(self):
        """
        Retrieve the geographical coordinates (lattitude and longitude) of a point from the x and y coordinates of the window

        Returns
        -------
        lat : float
            Lattitude of the concerned point
        lon : float
            Longitude of the concerned point

        """
        x, y = self.main_view.x, self.main_view.y
        lat, lon = self.coordinate_converter.canvas_to_geo(x=x, y=y,
                                                            canvas=self.secondary_view.canvas,
                                                            base_image=self.secondary_view.base_image,
                                                            lats=self.secondary_view.lats,      
                                                            lons=self.secondary_view.lons,      
                                                            pan_x=self.secondary_view.pan_x,
                                                            pan_y=self.secondary_view.pan_y,
                                                            zoom=self.secondary_view.zoom
                                                            )

        return (lat, lon)
        
    def create_top_map(self, frame, width, height, year, scenario):
        """
        Create a map adapted to the user's choice (reuse of a function from SecondaryView)

        Parameters
        ----------
        frame : canva
            Previous canvas
        width : int
            Width of the base map (for the generate_base_image function)
        height : int
            Height of the base map (for the generate_base_image function)
        year : int
            Year choosen by the user to visualize the map
        scenario : int
            Scenario choosen by the user to visualize the map

        Returns
        -------
        None.

        """
        # Clear old canvas if exists
        for widget in self.main_view.frame_map.winfo_children():
            widget.pack_forget()
            
        self.secondary_view.create_map(self.frame,    #Reuse the function defined in the SecondaryView class
                                       self.width,
                                       self.height,
                                       self.main_view.get_user_year(),
                                       self.main_view.get_ipcc_value(),
                                       self.sea_level_value,
                                       )
        self.side = "top" #Set the parameter to then display the general view of the map
        
    def create_profile_map(self):
        """
        Prepare and draw the profile view of a country for which it is available if the user has clicked on it.
        
        Returns :
        ------- 
        None
        """
        #If the user has clicked on the a country for which the profile view is available
        if self.elevation_data.test_if_point_in(self.get_where_clicked()):
            # Clear old ProfileView if exists
            for widget in self.main_view.frame_map.winfo_children():
                widget.pack_forget()
    
            # Prepare data: dictionary of elevation with respect to the longitude (for France only)
            dico_per_long = self.elevation_data.build_dico_per_long(self.mainland_france)
            
    
            # Draw profile
            self.profile_view.draw_profile(self.frame, 
                                           self.width, 
                                           self.height, 
                                           dico_per_long, 
                                           self.sea_level)
        self.side = "profile" #Set the parameter to then display the profile view of the concerned country
            
    def get_number_refugees(self):
        """
        Retrieve the theoretical number of refugees for the choosen year from the computations made in ElevationData class

        Returns
        -------
        None.

        """
        elevation_2025 = self.sea_level.retrieve_sea_level(2025, self.scenario)
        #Uses the function defined in the ElevationData class
        self.elevation_data.compute_refugees(self, self.year, self.sea_level_value, elevation_2025)
        


